// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/myacey/redditclone/internal/models"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// AddCommentToPost mocks base method.
func (m *MockServiceInterface) AddCommentToPost(ctx context.Context, postID string, newComment models.Comment) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCommentToPost", ctx, postID, newComment)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCommentToPost indicates an expected call of AddCommentToPost.
func (mr *MockServiceInterfaceMockRecorder) AddCommentToPost(ctx, postID, newComment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCommentToPost", reflect.TypeOf((*MockServiceInterface)(nil).AddCommentToPost), ctx, postID, newComment)
}

// AddPost mocks base method.
func (m *MockServiceInterface) AddPost(ctx context.Context, newPost *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPost", ctx, newPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPost indicates an expected call of AddPost.
func (mr *MockServiceInterfaceMockRecorder) AddPost(ctx, newPost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPost", reflect.TypeOf((*MockServiceInterface)(nil).AddPost), ctx, newPost)
}

// CheckUserSession mocks base method.
func (m *MockServiceInterface) CheckUserSession(ctx context.Context, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserSession", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserSession indicates an expected call of CheckUserSession.
func (mr *MockServiceInterfaceMockRecorder) CheckUserSession(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserSession", reflect.TypeOf((*MockServiceInterface)(nil).CheckUserSession), ctx, userID, token)
}

// CreateNewUser mocks base method.
func (m *MockServiceInterface) CreateNewUser(ctx context.Context, user *models.User) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewUser", ctx, user)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewUser indicates an expected call of CreateNewUser.
func (mr *MockServiceInterfaceMockRecorder) CreateNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewUser", reflect.TypeOf((*MockServiceInterface)(nil).CreateNewUser), ctx, user)
}

// DeletePostWithID mocks base method.
func (m *MockServiceInterface) DeletePostWithID(ctx context.Context, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePostWithID", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePostWithID indicates an expected call of DeletePostWithID.
func (mr *MockServiceInterfaceMockRecorder) DeletePostWithID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePostWithID", reflect.TypeOf((*MockServiceInterface)(nil).DeletePostWithID), ctx, postID)
}

// GetAllPosts mocks base method.
func (m *MockServiceInterface) GetAllPosts(ctx context.Context) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", ctx)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockServiceInterfaceMockRecorder) GetAllPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockServiceInterface)(nil).GetAllPosts), ctx)
}

// GetPostByID mocks base method.
func (m *MockServiceInterface) GetPostByID(ctx context.Context, postID string, increateVote bool) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postID, increateVote)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockServiceInterfaceMockRecorder) GetPostByID(ctx, postID, increateVote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockServiceInterface)(nil).GetPostByID), ctx, postID, increateVote)
}

// GetPostsByAuthor mocks base method.
func (m *MockServiceInterface) GetPostsByAuthor(ctx context.Context, username string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByAuthor", ctx, username)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByAuthor indicates an expected call of GetPostsByAuthor.
func (mr *MockServiceInterfaceMockRecorder) GetPostsByAuthor(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByAuthor", reflect.TypeOf((*MockServiceInterface)(nil).GetPostsByAuthor), ctx, username)
}

// GetPostsByCategory mocks base method.
func (m *MockServiceInterface) GetPostsByCategory(ctx context.Context, category string) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByCategory", ctx, category)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByCategory indicates an expected call of GetPostsByCategory.
func (mr *MockServiceInterfaceMockRecorder) GetPostsByCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByCategory", reflect.TypeOf((*MockServiceInterface)(nil).GetPostsByCategory), ctx, category)
}

// GetUserFromDBByID mocks base method.
func (m *MockServiceInterface) GetUserFromDBByID(ctx context.Context, userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromDBByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromDBByID indicates an expected call of GetUserFromDBByID.
func (mr *MockServiceInterfaceMockRecorder) GetUserFromDBByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromDBByID", reflect.TypeOf((*MockServiceInterface)(nil).GetUserFromDBByID), ctx, userID)
}

// GetUserFromDBByUsername mocks base method.
func (m *MockServiceInterface) GetUserFromDBByUsername(ctx context.Context, username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromDBByUsername", ctx, username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromDBByUsername indicates an expected call of GetUserFromDBByUsername.
func (mr *MockServiceInterfaceMockRecorder) GetUserFromDBByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromDBByUsername", reflect.TypeOf((*MockServiceInterface)(nil).GetUserFromDBByUsername), ctx, username)
}

// LoginUser mocks base method.
func (m *MockServiceInterface) LoginUser(ctx context.Context, username string) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, username)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceInterfaceMockRecorder) LoginUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockServiceInterface)(nil).LoginUser), ctx, username)
}

// RemoveComment mocks base method.
func (m *MockServiceInterface) RemoveComment(ctx context.Context, postID, commentID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveComment", ctx, postID, commentID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveComment indicates an expected call of RemoveComment.
func (mr *MockServiceInterfaceMockRecorder) RemoveComment(ctx, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveComment", reflect.TypeOf((*MockServiceInterface)(nil).RemoveComment), ctx, postID, commentID)
}

// UnvotePostWithID mocks base method.
func (m *MockServiceInterface) UnvotePostWithID(ctx context.Context, postID, userID string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnvotePostWithID", ctx, postID, userID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnvotePostWithID indicates an expected call of UnvotePostWithID.
func (mr *MockServiceInterfaceMockRecorder) UnvotePostWithID(ctx, postID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnvotePostWithID", reflect.TypeOf((*MockServiceInterface)(nil).UnvotePostWithID), ctx, postID, userID)
}

// VotePostWithID mocks base method.
func (m *MockServiceInterface) VotePostWithID(ctx context.Context, postID string, newVote *models.Vote) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VotePostWithID", ctx, postID, newVote)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VotePostWithID indicates an expected call of VotePostWithID.
func (mr *MockServiceInterfaceMockRecorder) VotePostWithID(ctx, postID, newVote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VotePostWithID", reflect.TypeOf((*MockServiceInterface)(nil).VotePostWithID), ctx, postID, newVote)
}
