// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/token/token.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/myacey/redditclone/internal/models"
)

// MockTokenMaker is a mock of TokenMaker interface.
type MockTokenMaker struct {
	ctrl     *gomock.Controller
	recorder *MockTokenMakerMockRecorder
}

// MockTokenMakerMockRecorder is the mock recorder for MockTokenMaker.
type MockTokenMakerMockRecorder struct {
	mock *MockTokenMaker
}

// NewMockTokenMaker creates a new mock instance.
func NewMockTokenMaker(ctrl *gomock.Controller) *MockTokenMaker {
	mock := &MockTokenMaker{ctrl: ctrl}
	mock.recorder = &MockTokenMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenMaker) EXPECT() *MockTokenMakerMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockTokenMaker) CreateToken(usr *models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", usr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenMakerMockRecorder) CreateToken(usr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenMaker)(nil).CreateToken), usr)
}

// ExtractUserID mocks base method.
func (m *MockTokenMaker) ExtractUserID(tokenString string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractUserID", tokenString)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractUserID indicates an expected call of ExtractUserID.
func (mr *MockTokenMakerMockRecorder) ExtractUserID(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractUserID", reflect.TypeOf((*MockTokenMaker)(nil).ExtractUserID), tokenString)
}
